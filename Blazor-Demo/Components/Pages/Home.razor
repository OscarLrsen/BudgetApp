@page "/"
@rendermode InteractiveServer
@using MyBlazorApp.Models
@using MyBlazorApp.Data
@using Microsoft.EntityFrameworkCore
@using System.ComponentModel.DataAnnotations
@inject ApplicationDbContext _context

<PageTitle>BudgetHelper</PageTitle>

<style>
    /* Reset & Base Styles */
    * {
        box-sizing: border-box;
        margin: 0;
        padding: 0;
    }
    body {
        background: linear-gradient(to right, #e2e2e2, #c9d6ff);
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        color: #333;
        line-height: 1.6;
        padding-bottom: 40px;
    }
    /* Navigation Bar */
    .navbar {
        width: 100%;
        background: #fff;
        padding: 20px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        text-align: center;
        font-size: 24px;
        font-weight: bold;
        position: sticky;
        top: 0;
        z-index: 1000;
    }
    /* Logo & Logo Container */
    .main-container {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 10vh;
    }
    .logo {
        width: 100px;
        height: auto;
    }
    /* Main Container for Forms */
    .container {
        width: 90%;
        max-width: 1200px;
        margin: 40px auto;
        display: flex;
        flex-wrap: wrap;
        gap: 30px;
        justify-content: center;
    }
    /* Box Styling for Forms */
    .box {
        background: #fff;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        padding: 30px;
        flex: 1 1 300px;
        max-width: 450px;
    }
    form h2 {
        margin-bottom: 20px;
        font-size: 22px;
        border-bottom: 2px solid #e2e2e2;
        padding-bottom: 10px;
    }
    form label {
        display: block;
        margin: 15px 0 5px;
        font-weight: bold;
    }
    form input[type="number"],
    form input[type="text"],
    form select {
        width: 100%;
        padding: 12px;
        border: 1px solid #ccc;
        border-radius: 5px;
        margin-bottom: 10px;
    }
    form button {
        width: 100%;
        padding: 12px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 16px;
        margin-top: 10px;
    }
    .btn-primary {
        background-color: #007bff;
        color: #fff;
    }
    .btn-danger {
        background-color: #dc3545;
        color: #fff;
    }
    form button:hover {
        opacity: 0.9;
    }
    /* Summary Section */
    .summary {
        width: 90%;
        max-width: 1200px;
        background: #4a6cf7;
        color: #fff;
        display: flex;
        justify-content: space-around;
        align-items: center;
        padding: 20px;
        border-radius: 10px;
        margin: 20px auto;
        font-size: 18px;
    }
    /* Expenses List */
    .expenses-list {
        width: 90%;
        max-width: 1200px;
        background: #fff;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        margin: 20px auto;
    }
    .expenses-list h2 {
        margin-bottom: 20px;
        font-size: 22px;
        text-align: center;
    }
    table {
        width: 100%;
        border-collapse: collapse;
    }
    th, td {
        text-align: left;
        padding: 15px;
        border-bottom: 1px solid #f2f2f2;
    }
    th {
        background: #f9f9f9;
    }
    .icons {
        display: flex;
        gap: 15px;
        justify-content: center;
    }
    .icons i {
        cursor: pointer;
        font-size: 20px;
        transition: color 0.3s;
    }
    .icons i:hover {
        color: #dc3545;
    }
    /* Footer */
    .footer {
        text-align: center;
        padding: 20px;
        color: #777;
        margin-top: 40px;
    }
    /* Chart Container */
    .chart-container {
        width: 50%;
        margin: auto;
        padding-top: 40px;
    }
</style>

<!-- Navigation Bar -->
<div class="navbar">
    BudgetHelper
</div>

<!-- Logo Container -->
<div class="main-container">
    <img src="logo.png" alt="BudgetWise Logo" class="logo" />
</div>

<!-- Main Content -->
<div class="container">
    <!-- Budget Form -->
    <div class="box">
        <EditForm Model="budgetModel" OnValidSubmit="HandleSetBudget" FormName="BudgetForm">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <h2>Budget</h2>
            <label for="income">Income</label>
            <InputNumber id="income" @bind-Value="budgetModel.Income" placeholder="Enter Total Amount" required />
            <button type="submit" class="btn-primary">Set Budget</button>
        </EditForm>

        <!-- Delete All Button -->
        <form method="post" @onsubmit="HandleDeleteAll">
            <button type="submit" class="btn-danger">Delete Budget & Expenses</button>
        </form>
    </div>

    <!-- Expense Form -->
    <div class="box">
        @if (expenseEditContext != null)
        {
            <EditForm EditContext="expenseEditContext" OnValidSubmit="HandleAddExpense" FormName="ExpenseForm">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <h2>Expenses</h2>
                <label for="expenseName">Expense Title</label>
                <InputText id="expenseName" @bind-Value="expenseModel.Name" placeholder="Enter Title Of Product" required />
                <label for="expenseAmount">Amount</label>
                <InputNumber id="expenseAmount" @bind-Value="expenseModel.Amount" placeholder="Enter Cost Of Product" required />
                <label for="expenseCategory">Category</label>
                <select id="expenseCategory" @bind="expenseModel.CategoryId" required>
                    <option value="">Select a category</option>
                    @foreach (var category in Categories)
                    {
                        <option value="@category.Id">@category.Name</option>
                    }
                </select>
                <button type="submit" class="btn-danger">Add Expense</button>
            </EditForm>
        }
        else
        {
            <p>Loading form...</p>
        }
    </div>
</div>

<!-- Summary Section -->
<div class="summary">
    <div>Total Budget: @TotalBudget</div>
    <div>Expenses: @TotalExpenses</div>
    <div>Balance: @(TotalBudget - TotalExpenses)</div>
</div>

<!-- Expenses List -->
<div class="expenses-list">
    <h2>Expenses List</h2>
    <table>
        <tr>
            <th>Category</th>
            <th>Amount</th>
            <th>Actions</th>
        </tr>
        @foreach (var expense in Expenses)
        {
            <tr>
                <td>@GetCategoryName(expense.CategoryId)</td>
                <td>@expense.Amount</td>
                <td class="icons">
                    <i class='bx bx-edit' @onclick="() => EditExpense(expense)"></i>
                    <i class='bx bx-trash' @onclick="() => DeleteExpense(expense)"></i>
                </td>
            </tr>
        }
    </table>
</div>

<!-- Chart Section -->
<div class="chart-container">
    <canvas id="budgetChart"></canvas>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    document.addEventListener("DOMContentLoaded", async function () {
        console.log("Pie Chart loading...");

        // For demo purposes, static data is used. In production, replace this with API-fetched data.
        const totalBudget = @TotalBudget;
        const expenses = @System.Text.Json.JsonSerializer.Serialize(Expenses.Select(e => new { category = GetCategoryName(e.CategoryId), amount = e.Amount }));

        const expenseData = JSON.parse(expenses);
        const grouped = expenseData.reduce((acc, curr) => {
            acc[curr.category] = (acc[curr.category] || 0) + curr.amount;
            return acc;
        }, {});
        const labels = Object.keys(grouped);
        const amounts = Object.values(grouped);
        const sumExpenses = amounts.reduce((a, b) => a + b, 0);
        const remainingBudget = totalBudget - sumExpenses;

        const ctx = document.getElementById('budgetChart').getContext('2d');
        new Chart(ctx, {
            type: 'pie',
            data: {
                labels: [...labels, 'Remaining Budget'],
                datasets: [{
                    data: [...amounts, remainingBudget],
                    backgroundColor: ['#ff6384', '#36a2eb', '#ffcd56', '#4bc0c0', '#9966ff'],
                    borderColor: ['#ff3b60', '#2a82c8', '#ffb347', '#4fbfbf', '#8f5fff'],
                    borderWidth: 2
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: { position: 'top' },
                    title: { display: true, text: 'Budget Overview' }
                }
            }
        });
        console.log("Pie chart created!");
    });
</script>

@code {
    // Form input models
    private BudgetInput budgetModel = new BudgetInput();
    private ExpenseInput expenseModel = new ExpenseInput();
    private EditContext expenseEditContext;

    // Local state for budget and expenses
    private decimal TotalBudget { get; set; }
    private decimal TotalExpenses => Expenses.Sum(e => e.Amount);
    private List<Category> Categories { get; set; } = new();
    private List<Expense> Expenses { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        // Ensure dummy user exists to satisfy foreign key constraints
        var dummyUser = await _context.Users.FirstOrDefaultAsync(u => u.Id == "demo-user");
        if (dummyUser == null)
        {
            dummyUser = new User { Id = "demo-user" };
            _context.Users.Add(dummyUser);
            await _context.SaveChangesAsync();
        }

        // Initialize categories and expenses.
        Categories = await _context.Categories.ToListAsync();
        if (!Categories.Any())
        {
            Categories = new List<Category>
            {
                new Category { Name = "Food" },
                new Category { Name = "Car" },
                new Category { Name = "Rent" },
                new Category { Name = "Travel" }
            };
            _context.Categories.AddRange(Categories);
            await _context.SaveChangesAsync();
        }
        Expenses = await _context.Expenses.ToListAsync();
        expenseEditContext = new EditContext(expenseModel);
    }

    // Set the budget
    private async Task HandleSetBudget()
    {
        TotalBudget = budgetModel.Income;
        await Task.CompletedTask;
    }

    // Handle adding a new expense
    private async Task HandleAddExpense()
    {
        if (!expenseModel.CategoryId.HasValue)
            return;

        var category = Categories.FirstOrDefault(c => c.Id == expenseModel.CategoryId.Value);
        if (category == null)
            return;

        var expense = new Expense
        {
            Name = expenseModel.Name,
            Amount = expenseModel.Amount,
            Date = DateTime.Now,
            CategoryId = category.Id,
            UserId = "demo-user"
        };

        _context.Expenses.Add(expense);
        await _context.SaveChangesAsync();

        Expenses = await _context.Expenses.ToListAsync();

        expenseModel = new ExpenseInput();
        expenseEditContext = new EditContext(expenseModel);
        expenseEditContext.MarkAsUnmodified();
        StateHasChanged();
    }

    // Placeholder for editing an expense
    private void EditExpense(Expense expense)
    {
        // Implement editing logic as needed.
    }

    // Delete an expense
    private async Task DeleteExpense(Expense expense)
    {
        _context.Expenses.Remove(expense);
        await _context.SaveChangesAsync();
        Expenses = await _context.Expenses.ToListAsync();
    }

    // Delete all budget & expenses
    private async Task HandleDeleteAll()
    {
        var allExpenses = _context.Expenses.ToList();
        _context.Expenses.RemoveRange(allExpenses);
        await _context.SaveChangesAsync();

        TotalBudget = 0;
        Expenses = new List<Expense>();

        StateHasChanged();
    }

    // Get category name by its Id
    private string GetCategoryName(int categoryId)
    {
        return Categories.FirstOrDefault(c => c.Id == categoryId)?.Name ?? "Unknown";
    }

    // Input model for budget
    public class BudgetInput
    {
        [Required(ErrorMessage = "Income is required")]
        [Range(0.01, double.MaxValue, ErrorMessage = "Income must be greater than 0")]
        public decimal Income { get; set; }
    }

    // Input model for expense
    public class ExpenseInput
    {
        [Required(ErrorMessage = "Expense Name is required")]
        public string Name { get; set; }

        [Required(ErrorMessage = "Expense Amount is required")]
        [Range(0.01, double.MaxValue, ErrorMessage = "Amount must be greater than 0")]
        public decimal Amount { get; set; }

        [Required(ErrorMessage = "Please select a category")]
        public int? CategoryId { get; set; }
    }
}
