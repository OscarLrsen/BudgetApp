@page "/"
@using Microsoft.AspNetCore.Components.Authorization
@using MyBlazorApp.Models
@using MyBlazorApp.Data
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims
@inject ApplicationDbContext _context
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>BudgetHelper</PageTitle>

<style>
    /* Reset & Base Styles */
    * {
        box-sizing: border-box;
        margin: 0;
        padding: 0;
    }

    body {
        background: linear-gradient(to right, #e2e2e2, #c9d6ff);
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        color: #333;
        line-height: 1.6;
        padding-bottom: 40px;
    }
    /* Navigation Bar */
    .navbar {
        width: 100%;
        background: #fff;
        padding: 20px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        text-align: center;
        font-size: 24px;
        font-weight: bold;
        position: sticky;
        top: 0;
        z-index: 1000;
    }
    /* Main Container */
    .container {
        width: 90%;
        max-width: 1200px;
        margin: 40px auto;
        display: flex;
        flex-wrap: wrap;
        gap: 30px;
        justify-content: center;
    }
    /* Box Styling for Forms */
    .box {
        background: #fff;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        padding: 30px;
        flex: 1 1 300px;
        max-width: 450px;
    }

    form h2 {
        margin-bottom: 20px;
        font-size: 22px;
        border-bottom: 2px solid #e2e2e2;
        padding-bottom: 10px;
    }

    form label {
        display: block;
        margin: 15px 0 5px;
        font-weight: bold;
    }

    form input[type="number"],
    form input[type="text"],
    form select {
        width: 100%;
        padding: 12px;
        border: 1px solid #ccc;
        border-radius: 5px;
        margin-bottom: 10px;
    }

    form button {
        width: 100%;
        padding: 12px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 16px;
        margin-top: 10px;
    }

    .btn-primary {
        background-color: #007bff;
        color: #fff;
    }

    .btn-danger {
        background-color: #dc3545;
        color: #fff;
    }

    .btn-secondary {
        background-color: #6c757d;
        color: #fff;
        margin-top: 10px;
        width: 100%;
        padding: 12px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 16px;
    }

    form button:hover {
        opacity: 0.9;
    }
    /* Summary Section */
    .summary {
        width: 90%;
        max-width: 1200px;
        background: #4a6cf7;
        color: #fff;
        display: flex;
        justify-content: space-around;
        align-items: center;
        padding: 20px;
        border-radius: 10px;
        margin: 20px auto;
        font-size: 18px;
    }
    /* Expenses List */
    .expenses-list {
        width: 90%;
        max-width: 1200px;
        background: #fff;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        margin: 20px auto;
    }

        .expenses-list h2 {
            margin-bottom: 20px;
            font-size: 22px;
            text-align: center;
        }

    table {
        width: 100%;
        border-collapse: collapse;
    }

    th, td {
        text-align: left;
        padding: 15px;
        border-bottom: 1px solid #f2f2f2;
    }

    th {
        background: #f9f9f9;
    }

    .icons {
        display: flex;
        gap: 15px;
        justify-content: center;
    }

        .icons button {
            cursor: pointer;
            font-size: 14px;
            margin-right: 5px;
        }

            .icons button:hover {
                opacity: 0.8;
            }
    /* Footer */
    .footer {
        text-align: center;
        padding: 20px;
        color: #777;
        margin-top: 40px;
    }
</style>

<!-- Navigation Bar -->
<div class="navbar">BudgetHelper</div>

<!-- Main Content -->
<div class="container">
    <!-- Budget Form -->
    <div class="box">
        <EditForm Model="budgetModel" OnValidSubmit="HandleSetBudget">
            <DataAnnotationsValidator />
            <h2>Budget</h2>
            <label for="income">Income</label>
            <InputNumber id="income" @bind-Value="budgetModel.Income" placeholder="Enter Total Amount" />
            <ValidationSummary />
            <button type="submit" class="btn-primary">Set Budget</button>
        </EditForm>
    </div>
    <!-- Expense Form -->
    <div class="box">
        <EditForm Model="expenseModel" OnValidSubmit="HandleExpenseSubmit">
            <DataAnnotationsValidator />
            <h2>Expenses</h2>
            <label for="expenseName">Expense Title</label>
            <InputText id="expenseName" @bind-Value="expenseModel.Name" placeholder="Enter Title Of Product" />
            <label for="expenseAmount">Amount</label>
            <InputNumber id="expenseAmount" @bind-Value="expenseModel.Amount" placeholder="Enter Cost Of Product" />
            <label for="expenseCategory">Category</label>
            <InputSelect id="expenseCategory" @bind-Value="expenseModel.CategoryId">
                <option value="0">Select a category</option>
                @foreach (var category in Categories)
                {
                    <option value="@category.Id">@category.Name</option>
                }
            </InputSelect>
            <ValidationSummary />
            <button type="submit" class="btn-danger">
                @(editingExpense == null ? "Add Expense" : "Update Expense")
            </button>
            @if (editingExpense != null)
            {
                <button type="button" class="btn-secondary" @onclick="CancelEdit">Cancel</button>
            }
        </EditForm>
    </div>
</div>

<!-- Summary Section -->
<div class="summary">
    <div>Total Budget: @Budget</div>
    <div>Expenses: @TotalExpenses</div>
    <div>Balance: @(Budget - TotalExpenses)</div>
</div>

<!-- Expenses List -->
<div class="expenses-list">
    <h2>Expenses List</h2>
    <table>
        <thead>
            <tr>
                <th>Category</th>
                <th>Amount</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var expense in Expenses)
            {
                <tr>
                    <td>@GetCategoryName(expense.CategoryId)</td>
                    <td>@expense.Amount</td>
                    <td class="icons">
                        <button @onclick="() => EditExpense(expense)">Edit</button>
                        <button @onclick="() => DeleteExpense(expense.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    // Input models for binding
    public class BudgetInputModel
    {
        public decimal Income { get; set; }
    }
    public class ExpenseInputModel
    {
        public string Name { get; set; }
        public decimal Amount { get; set; }
        public int CategoryId { get; set; }
    }

    private BudgetInputModel budgetModel = new BudgetInputModel();
    private ExpenseInputModel expenseModel = new ExpenseInputModel();

    // Local budget variable (not persisted to database)
    private decimal Budget { get; set; } = 0;
    private decimal TotalExpenses => Expenses.Sum(e => e.Amount);
    private List<Category> Categories { get; set; } = new List<Category>();
    private List<Expense> Expenses { get; set; } = new List<Expense>();

    // Expense currently being edited (null when not editing)
    private Expense editingExpense = null;

    // Current user ID
    private string userId;

    protected override async Task OnInitializedAsync()
    {
        // Get the current authenticated user.
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        }
        else
        {
            // Handle unauthenticated state as needed.
            return;
        }

        // Load categories.
        Categories = await _context.Categories.ToListAsync();
        if (!Categories.Any())
        {
            Categories = new List<Category>
            {
                new Category { Name = "Food" },
                new Category { Name = "Car" },
                new Category { Name = "Rent" },
                new Category { Name = "Travel" }
            };
            _context.Categories.AddRange(Categories);
            await _context.SaveChangesAsync();
        }

        // Load expenses for the current user.
        Expenses = await _context.Expenses
                                 .Where(e => e.UserId == userId)
                                 .Include(e => e.Category)
                                 .ToListAsync();

        // Initialize Budget to 0 or any default value.
        Budget = 0;
    }

    private async Task HandleSetBudget()
    {
        Console.WriteLine($"Setting budget to: {budgetModel.Income}");
        Budget = budgetModel.Income;
        // Since we are not using a persistent UserBudget,
        // the budget is only stored locally.
    }

    private async Task HandleExpenseSubmit()
    {
        if (editingExpense != null)
        {
            // Update the existing expense.
            editingExpense.Name = expenseModel.Name;
            editingExpense.Amount = expenseModel.Amount;
            editingExpense.CategoryId = expenseModel.CategoryId;
            editingExpense.Date = DateTime.Now;
            _context.Expenses.Update(editingExpense);
            await _context.SaveChangesAsync();
            Console.WriteLine($"Updated expense: {editingExpense.Name}");
            editingExpense = null;
        }
        else
        {
            if (expenseModel.CategoryId == 0 || !Categories.Any(c => c.Id == expenseModel.CategoryId))
            {
                Console.WriteLine("Invalid category selected.");
                return;
            }
            var newExpense = new Expense
                {
                    Name = expenseModel.Name,
                    Amount = expenseModel.Amount,
                    Date = DateTime.Now,
                    CategoryId = expenseModel.CategoryId,
                    UserId = userId
                };
            _context.Expenses.Add(newExpense);
            await _context.SaveChangesAsync();
            Console.WriteLine($"Added expense: {newExpense.Name}");
        }
        Expenses = await _context.Expenses
                                 .Where(e => e.UserId == userId)
                                 .Include(e => e.Category)
                                 .ToListAsync();
        expenseModel = new ExpenseInputModel();
    }

    private void EditExpense(Expense expense)
    {
        editingExpense = expense;
        expenseModel = new ExpenseInputModel
            {
                Name = expense.Name,
                Amount = expense.Amount,
                CategoryId = expense.CategoryId
            };
        Console.WriteLine($"Editing expense: {expense.Name}");
    }

    private async Task DeleteExpense(int expenseId)
    {
        var expense = await _context.Expenses.FirstOrDefaultAsync(e => e.Id == expenseId && e.UserId == userId);
        if (expense != null)
        {
            _context.Expenses.Remove(expense);
            await _context.SaveChangesAsync();
            Expenses = await _context.Expenses
                                     .Where(e => e.UserId == userId)
                                     .Include(e => e.Category)
                                     .ToListAsync();
        }
    }

    private void CancelEdit()
    {
        editingExpense = null;
        expenseModel = new ExpenseInputModel();
        Console.WriteLine("Cancelled editing.");
    }

    private string GetCategoryName(int categoryId)
    {
        return Categories.FirstOrDefault(c => c.Id == categoryId)?.Name ?? "Unknown";
    }
}